---
name: Chess
type:
  blueId: 6F9bjtAd85XgPGvzh7zcZp92tdR4mTcQcMUC8VuPYgZb
properties:
  playerToMove:
    description: Indicates whose move it is ('white' or 'black')
    type:
      blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
    value: white
  winner:
    description: "Indicates who won the game (e.g., 'White', 'Black', or 'None' if\
      \ the game is not over or ended in a draw)"
    type:
      blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
  draw:
    description: Indicates whether the game ended in a draw (true) or not (false)
    type:
      blueId: EL6AjrbJsxTWRTPzY8WR8Y2zAMXRbydQj83PcZwuAHbo
  chessboard:
    description: Chessboard state in FEN notation
    type:
      blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
    value: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
  movesHistory:
    description: History of moves made
    type:
      blueId: G8wmfjEqugPEEXByMYWJXiEdbLToPRWNQEekNxrxfQWB
    itemType:
      blueId: 8jZbrfLeR9hmGRarz7N5wqpFVnrWwhA4Gb2UfwZqzpsX
  gameOver:
    description: Indicates whether the game has ended (true) or is still in progress
      (false)
    type:
      blueId: EL6AjrbJsxTWRTPzY8WR8Y2zAMXRbydQj83PcZwuAHbo
workflows:
  items:
  - steps:
      items:
      - type:
          blueId: 3uFwcdCx8Sdw43hGbBL3t9YGRocLbAewHzzxbrKAkUKF
        event:
          type:
            blueId: F1ms5GGG6wnH2giTFFxJ6H1o9BB5isFZHJoLHDkKXWWX
          playerBlackTimeline:
            blueId: "${contract('/messaging/participants/Player Black/timeline/blueId')}"
          playerWhiteTimeline:
            blueId: "${contract('/messaging/participants/Player White/timeline/blueId')}"
    trigger:
      name: TriggerStep
      event:
        type:
          blueId: 3uzSCGkrdX4hTFGuLbyZES7NQmiuFskCpUy572GxNQuC
  - name: Move
    steps:
      items:
      - name: Check Player
        type:
          blueId: 5TrdtnYzrxenA6HLujs6z2Q5gLcS9heyrr3HpBNSbeFb
        code:
          type:
            blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
          value: "let playerToMove = contract(\"/properties/playerToMove\");\nlet\
            \ expectedTimeline = (playerToMove === 'white') ? \n    contract(\"/messaging/participants/Player\
            \ White/timeline\") :\n    contract(\"/messaging/participants/Player Black/timeline\"\
            )\nlet timeline = event.timeline;\n\nif (timeline.blueId != expectedTimeline.blueId)\
            \ {                   \n  throw new RejectAndAwaitNextEventException('Not\
            \ your move!');\n}\nreturn { }\n"
      - name: ProcessMove
        type:
          blueId: 5TrdtnYzrxenA6HLujs6z2Q5gLcS9heyrr3HpBNSbeFb
        code:
          type:
            blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
          value: |
            const chessModule = importBlueESModule('blue:FQP53g6UNu75EeEDmTX8mKHqoNSLQgYxQxpFhAzKyHhJ');
            const Chess = chessModule.Chess;

            function checkMove(from, to, position) {
                const game = new Chess(position);

                try {
                    const move = game.move({ from, to });
                    if (move === null) {
                        return { legal: false, position: game.fen(), gameOver: false, winner: null, draw: false };
                    }
                    const newPosition = game.fen();

                    let gameOver = game.isGameOver();
                    let winner = null;
                    let draw = false;

                    if (gameOver) {
                        if (game.isCheckmate()) {
                            winner = game.turn() === 'w' ? 'black' : 'white';
                        } else if (game.isDraw()) {
                            draw = true;
                        }
                    }

                    return { legal: true, position: newPosition, gameOver: gameOver, winner: winner, draw: draw };
                } catch (error) {
                    return { legal: false, position: game.fen(), error: error.message, gameOver: false, winner: null, draw: false };
                }
            }

            let position = contract("/properties/chessboard");
            let from = event.message.from;
            let to = event.message.to;
            let result;

            result = checkMove(from, to, position);

            if (!result.legal) {
              throw new RejectAndAwaitNextEventException('Illegal move');
            }

            if (result.winner === null) {
              result.winner = 'None';
            }

            return { result };
      - name: Emit Event
        type:
          blueId: 3uFwcdCx8Sdw43hGbBL3t9YGRocLbAewHzzxbrKAkUKF
        event:
          type:
            blueId: EgyqonRWYcQGoQH1fHKgbRRp5XRzp7CHEpgcY1Cq2CgJ
          playerMakingMove:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${contract(\"/properties/playerToMove\")}"
          winner:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${steps.ProcessMove.result.winner}"
          chessboardAfterMove:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${steps.ProcessMove.result.position}"
          from:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${event.message.from}"
          draw:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${steps.ProcessMove.result.draw}"
          to:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${event.message.to}"
          gameOver:
            type:
              blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
            value: "${steps.ProcessMove.result.gameOver}"
      - name: Apply Changes
        type:
          blueId: 6PsXX3HF74kESc6eg58z8kNwzqD64xQ3PjGPUppzcWg6
        changeset:
          items:
          - val:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: "${steps.ProcessMove.result.position}"
            op:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: replace
            path:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: /properties/chessboard
          - val:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: "${steps.ProcessMove.result.draw}"
            op:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: replace
            path:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: /properties/draw
          - val:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: "${steps.ProcessMove.result.winner}"
            op:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: replace
            path:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: /properties/winner
          - val:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: "${steps.ProcessMove.result.gameOver}"
            op:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: replace
            path:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: /properties/gameOver
          - val:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: "${(contract(\"/properties/playerToMove\") === \"white\") ? \"\
                black\" : \"white\"}"
            op:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: replace
            path:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: /properties/playerToMove
          - val:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: "${event.message}"
            op:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: add
            path:
              type:
                blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
              value: /properties/movesHistory/-
    trigger:
      name: TriggerStep
      event:
        type:
          blueId: HWeoWDoYuMGdfzrCJoy58LeH9pFuPQXE9ioHvxVNBcPC
        message:
          type:
            blueId: 8jZbrfLeR9hmGRarz7N5wqpFVnrWwhA4Gb2UfwZqzpsX
messaging:
  participants:
    Player White:
      description: Player White timeline
    Player Black:
      description: Player Black timeline
