name: Gateway Function
type: 66oteHvnKcpRvS1ty6qND1keob9PJVakKxjTQPQY8YFA
initiateStepsCode: |
  function evaluateCondition(condition) {
    console.log(`Evaluating condition: ${condition}`);
    try {
      const xValue = contract("/properties/x");
      console.log(`x value: ${xValue}, type: ${typeof xValue}`);
      console.log(`x === 1: ${xValue === 1}`);
      console.log(`x == 1: ${xValue == 1}`);
      console.log(`Object.is(x, 1): ${Object.is(xValue, 1)}`);
      console.log(`x.toString(): "${xValue.toString()}"`);
      console.log(`JSON.stringify(x): ${JSON.stringify(xValue)}`);
      const result = new Function('contract', `return ${condition}`)(contract);
      console.log(`Condition result: ${result}`);
      return result;
    } catch (error) {
      console.error(`Error evaluating condition: ${error.message}`);
      return false;
    }
  }

  let steps = [];
  const conditions = functionStep.conditions || [];

  for (let condition of conditions) {
    if (condition.if) {
      if (evaluateCondition(condition.if)) {
        console.log('Condition matched');
        steps = condition.steps;
        break;
      } else {
        console.log('Condition did not match');
      }
    } else if (condition.else) {
      console.log('Using else condition');
      steps = condition.else;
      break;
    }
  }

  if (steps.length === 0 && conditions.length > 0) {
    console.warn('No condition matched and no else clause found in Gateway Function');
  }

  console.log(`Selected steps: ${JSON.stringify(steps)}`);
  ({ steps: steps });
x: 1