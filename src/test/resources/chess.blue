---
name: Chess
type:
  blueId: ENHYJSfuSCowcWkDThSazM4Pm4kne52YDofN3Riy1jh9
workflows:
- trigger:
    event:
      type:
        blueId: FpdE3U9mgzCGytPDbr11s2hJxTwGcDtMkXiZdBQySjNM
      message:
        type:
          blueId: 8jZbrfLeR9hmGRarz7N5wqpFVnrWwhA4Gb2UfwZqzpsX
  steps:
  - description: Check player
    type:
      blueId: 5TrdtnYzrxenA6HLujs6z2Q5gLcS9heyrr3HpBNSbeFb
    code: "let playerToMove = contract(\"/properties/playerToMove\");\nlet expectedTimeline\
      \ = (playerToMove === 'White') ? \n    contract(\"/messaging/participants/Player\
      \ White/timeline\") :\n    contract(\"/messaging/participants/Player Black/timeline\"\
      )\nlet timeline = event.timeline;\n\nif (timeline != expectedTimeline) {\n \
      \ throw new RejectAndAwaitNextEventException('Not your move!');\n}\nreturn {\
      \ }\n"
  - name: move
    type:
      blueId: 5TrdtnYzrxenA6HLujs6z2Q5gLcS9heyrr3HpBNSbeFb
    code: |
      const chessModule = importBlueESModule('blue:FQP53g6UNu75EeEDmTX8mKHqoNSLQgYxQxpFhAzKyHhJ');
      const Chess = chessModule.Chess;

      function checkMove(from, to, position) {
          const game = new Chess(position);

          try {
              const move = game.move({ from, to });
              if (move === null) {
                  return { legal: false, position: game.fen(), gameOver: false, winner: null, draw: false };
              }
              const newPosition = game.fen();

              let gameOver = game.isGameOver();
              let winner = null;
              let draw = false;

              if (gameOver) {
                  if (game.isCheckmate()) {
                      winner = game.turn() === 'w' ? 'black' : 'white';
                  } else if (game.isDraw()) {
                      draw = true;
                  }
              }

              return { legal: true, position: newPosition, gameOver: gameOver, winner: winner, draw: draw };
          } catch (error) {
              return { legal: false, position: game.fen(), error: error.message, gameOver: false, winner: null, draw: false };
          }
      }

      let position = contract("/properties/chessboard");
      let from = event.message.from;
      let to = event.message.to;
      let result;

      result = checkMove(from, to, position);

      if (!result.legal) {
        throw new RejectAndAwaitNextEventException('Illegal move');
      }

      if (result.winner === null) {
        result.winner = 'None';
      }

      return { result };
  - type:
      blueId: HfP2WSvDaHURif4Hk7KChk28CCfAdh97QKFvYcbs1F7j
    changeset:
    - val: "${steps.move.result.position}"
      op: replace
      path: /properties/chessboard
    - val: "${steps.move.result.draw}"
      op: replace
      path: /properties/draw
    - val: "${steps.move.result.winner}"
      op: replace
      path: /properties/winner
    - val: "${steps.move.result.gameOver}"
      op: replace
      path: /properties/gameOver
    - val: "${(contract(\"/properties/playerToMove\") === \"White\") ? \"Black\" :\
        \ \"White\"}"
      op: replace
      path: /properties/playerToMove
properties:
  winner:
    description: "Indicates who won the game (e.g., 'White', 'Black', or 'None' if\
      \ the game is not over or ended in a draw)"
    type:
      blueId: F92yo19rCcbBoBSpUA5LRxpfDejJDAaP1PRxxbWAraVP
  playerToMove: White
  chessboard: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
  draw:
    description: Indicates whether the game ended in a draw (true) or not (false)
    type:
      blueId: EL6AjrbJsxTWRTPzY8WR8Y2zAMXRbydQj83PcZwuAHbo
  gameOver:
    description: Indicates whether the game has ended (true) or is still in progress
      (false)
    type:
      blueId: EL6AjrbJsxTWRTPzY8WR8Y2zAMXRbydQj83PcZwuAHbo
messaging:
  participants:
    Player White:
      timeline: Hvi3cK5LBVYzgkydR23mPs5ARWYKjEsFd5mcJfGvKxcE
    Player Black:
      timeline: ARWYKjEsFd5mcJfGvKxcEHvi3cK5LBVYzgkydR23mPs5
